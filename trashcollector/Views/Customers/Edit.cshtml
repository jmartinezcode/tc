@model trashcollector.Models.CustomerAddressAccountViewModel

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_CustomerLayout.cshtml";
}

<h1>Welcome, @Html.DisplayFor(model => model.Customer.FirstName)</h1>

<h4>Update Preferences</h4>
<hr />
<div class="row">
    <div class="col">        
        <table class="table table-hover">
            <tr>
                <th scope="row">
                    @Html.DisplayNameFor(model => model.Customer.FirstName):
                </th>
                <td>
                    @Html.DisplayFor(model => model.Customer.FirstName)
                </td>
            </tr>
            <tr>
                <th scope="row">
                    @Html.DisplayNameFor(model => model.Customer.LastName):
                </th>
                <td>
                    @Html.DisplayFor(model => model.Customer.LastName)
                </td>
            </tr>
            <tr>
                <th scope="row">
                    @Html.DisplayNameFor(model => model.Address.Street):
                </th>
                <td>
                    @Html.DisplayFor(model => model.Address.Street)
                </td>
            </tr>
            <tr>
                <th scope="row">
                    @Html.DisplayNameFor(model => model.Address.City):
                </th>
                <td>
                    @Html.DisplayFor(model => model.Address.City)
                </td>
            </tr>
            <tr>
                <th scope="row">
                    @Html.DisplayNameFor(model => model.Address.State):
                </th>
                <td>
                    @Html.DisplayFor(model => model.Address.State)
                </td>
            </tr>
            <tr>
                <th scope="row">
                    @Html.DisplayNameFor(model => model.Address.zipCode):
                </th>
                <td>
                    @Html.DisplayFor(model => model.Address.zipCode)
                </td>
            </tr>
            @if (Model.Account.Balance == 0)
            {
                <tr class="table-success">
                    <th scope="row">
                        Account Balance:
                    </th>
                    <td>
                        $ @Html.DisplayFor(model => model.Account.Balance)
                    </td>
                </tr>
            }
            else
            {
                <tr class="table-warning">
                    <th scope="row">
                        Account Balance:
                    </th>
                    <td>
                        $ @Html.DisplayFor(model => model.Account.Balance)
                    </td>
                </tr>
            }
            <tr>
                @* Add logic to display new customer/no pickups if date == 1/1/1001 *@
                <th scope="row">
                    @Html.DisplayNameFor(model => model.Account.LastPickupDate):
                </th>
                <td>
                    @Html.DisplayFor(model => model.Account.LastPickupDate)
                </td>
            </tr>
            <tr>
                <th scope="row">
                    @Html.DisplayNameFor(model => model.Account.PickupDay):
                </th>
                <td>
                    @Html.DisplayFor(model => model.Account.PickupDay)
                </td>
            </tr>
            @if (DateTime.Today < Model.Account.OneTimePickup)
            {
                <tr>
                    <th scope="row">
                        @Html.DisplayNameFor(model => model.Account.OneTimePickup):
                    </th>
                    <td>
                        @Html.DisplayFor(model => model.Account.OneTimePickup)
                    </td>
                </tr>
            }
            <tr>
                <th scope="row">
                    Status of Service:
                </th>

                @if (DateTime.Today > Model.Account.EndSuspension || Model.Account.EndSuspension is null)
                {
                    <td class="text-sucess">Account Active</td>
                }
                else if (DateTime.Today >= Model.Account.StartSuspension && DateTime.Today <= Model.Account.EndSuspension)
                {
                    <td class="text-danger">Account Suspended</td>
                }
                else
                {
                    <td class="text-warning">Future Suspension Scheduled</td>
                }
            </tr>
            @if (Model.Account.IsSuspended)
            {
                <tr class="table-danger">
                    <th scope="row">
                        Suspended Service Started:
                    </th>
                    <td>
                        @Html.DisplayFor(model => model.Account.StartSuspension)
                    </td>
                </tr>
            }
            else if (Model.Account.StartSuspension > DateTime.Today)
            {
                <tr class="table-warning">
                    <th scope="row">
                        Suspended Service Begins:
                    </th>
                    <td>
                        @Html.DisplayFor(model => model.Account.StartSuspension)
                    </td>
                </tr>
            }
            else
            {

            }
            @if (Model.Account.IsSuspended)
            {
                <tr class="table-danger">
                    <th scope="row">
                        Suspended Service Ends:
                    </th>
                    <td>
                        @Html.DisplayFor(model => model.Account.EndSuspension)
                    </td>
                </tr>
            }
            else if (Model.Account.StartSuspension > DateTime.Today)
            {
                <tr class="table-warning">
                    <th scope="row">
                        Suspended Service Ends:
                    </th>
                    <td>
                        @Html.DisplayFor(model => model.Account.EndSuspension)
                    </td>
                </tr>
            }
            else
            {

            }
        </table>
    </div>
    <di class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="row form-group" style="margin-bottom: 16px">
                <label asp-for="Account.PickupDay" class="col form control-label"></label>             
                <select asp-for="Account.PickupDay" class="col form form-control" asp-items="new SelectList(new List<DayOfWeek> { DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday })"></select>             
            </div>
            <label class="row form-group" style="margin-bottom:16px; margin-left: 0px"><strong>Temporarily suspend your service below:</strong>
            </label>
            <div class="row form-group" style="margin-bottom: 16px">
                <label class="col form control-label">Start Date:</label>
                <input asp-for="Account.StartSuspension" class="form-control col form" />
            </div>
            <div class="row form-group" style="margin-bottom: 16px">
                <label class="col form control-label">End Date:</label>
                <input asp-for="Account.EndSuspension" class="form-control col form" />
            </div>                     
            <div class="row form-group" style="margin-bottom: 16px">                
                <label class="col form control-label">Schedule a One-Time Pick Up</label>             
                <input asp-for="Account.OneTimePickup" class="col form form-control" />
            </div>




            <div class="form-group">
                <input type="submit" value="Save changes" class="btn btn-outline-primary btn-sm" style="margin-top: 20px" />
            </div>
        </form>
</div>


<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
